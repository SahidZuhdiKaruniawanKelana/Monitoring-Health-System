// Library untuk MAX30102
#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h"

// Library untuk DS18B20
#include <OneWire.h>
#include <DallasTemperature.h>

// Library untuk OLED
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Pin dan konfigurasi
#define ONE_WIRE_BUS 2
#define BUZZER_PIN 3   // Tambahkan pin buzzer di pin digital 3
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

// Konfigurasi sample rate
#define TEMP_SAMPLES 10                 // Jumlah sample suhu untuk dirata-rata
#define HR_SAMPLES 10                   // Jumlah sample detak jantung untuk dirata-rata
#define TEMP_SAMPLE_INTERVAL 100        // Interval sampling suhu (ms)
#define DISPLAY_UPDATE_INTERVAL 500     // Interval update display (ms)

// Inisialisasi objek
MAX30105 particleSensor;
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Variabel global untuk detak jantung
long lastBeat = 0;
float beatsPerMinute;
float bpmValues[HR_SAMPLES];            // Array untuk menyimpan nilai BPM
int bpmIndex = 0;                       // Index untuk array BPM
bool bpmArrayFilled = false;            // Flag untuk mengetahui apakah array sudah terisi penuh
float bpmAvg = 0;                       // Rata-rata BPM
long irValue = 0;

// Variabel global untuk suhu
float tempValues[TEMP_SAMPLES];         // Array untuk menyimpan nilai suhu
int tempIndex = 0;                      // Index untuk array suhu
bool tempArrayFilled = false;           // Flag untuk mengetahui apakah array sudah terisi penuh
float tempAvg = 0;                      // Rata-rata suhu
float temperature = 0;
unsigned long lastTempRead = 0;
unsigned long lastDisplayUpdate = 0;

void setup() {
  Serial.begin(115200);                 // Meningkatkan baud rate untuk komunikasi lebih cepat
  Wire.begin();
  Wire.setClock(400000);                // Meningkatkan clock I2C untuk komunikasi lebih cepat (400kHz)
  delay(50);

  // Inisialisasi buzzer
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);        // Matikan buzzer di awal

  // OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("OLED gagal"));
    while (1);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.println("Inisialisasi...");
  display.display();

  // Inisialisasi array suhu dan detak jantung
  for (int i = 0; i < TEMP_SAMPLES; i++) {
    tempValues[i] = 0;
  }
  
  for (int i = 0; i < HR_SAMPLES; i++) {
    bpmValues[i] = 0;
  }

  // DS18B20
  sensors.begin();
  sensors.setWaitForConversion(false);  // Mode konversi non-blocking untuk pengambilan suhu lebih cepat
  sensors.requestTemperatures();        // Memulai pembacaan suhu pertama

  // MAX30102
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {  // Menggunakan I2C fast mode
    Serial.println("MAX30105 tidak ditemukan");
    while (1);
  }

  // Konfigurasi MAX30102 untuk kinerja optimal
  byte ledBrightness = 0x3F;  // Opsi: 0=Off to 255=50mA
  byte sampleAverage = 4;     // Opsi: 1, 2, 4, 8, 16, 32
  byte ledMode = 2;           // Opsi: 1=Red only, 2=Red+IR, 3=Red+IR+Green
  int sampleRate = 800;       // Opsi: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 215;       // Opsi: 69, 118, 215, 411
  int adcRange = 4096;        // Opsi: 2048, 4096, 8192, 16384
  
  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);
  particleSensor.setPulseAmplitudeRed(0x3F);
  particleSensor.setPulseAmplitudeGreen(0);

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Siap mengukur!");
  display.display();
  delay(500);
}

void loop() {
  unsigned long currentMillis = millis();
  
  // Baca sensor MAX30102
  irValue = particleSensor.getIR();

  // Proses pembacaan sesuai kondisi
  if (irValue > 50000) {
    // Jari terdeteksi - baca detak jantung
    if (checkForBeat(irValue)) {
      long delta = currentMillis - lastBeat;
      lastBeat = currentMillis;

      if (delta > 300 && delta < 1500) {  // Filter nilai yang valid
        beatsPerMinute = 60 / (delta / 1000.0);
        
        // Tambahkan ke array dan hitung rata-rata
        bpmValues[bpmIndex] = beatsPerMinute;
        bpmIndex++;
        
        if (bpmIndex >= HR_SAMPLES) {
          bpmIndex = 0;
          bpmArrayFilled = true;
        }
        
        // Hitung rata-rata
        calculateBPMAverage();
        
        Serial.print("BPM: ");
        Serial.print(beatsPerMinute);
        Serial.print("\tAvg BPM: ");
        Serial.println(bpmAvg);
      }
    }
    
    // Update display saat interval tercapai
    if (currentMillis - lastDisplayUpdate >= DISPLAY_UPDATE_INTERVAL) {
      lastDisplayUpdate = currentMillis;
      showHeartRate(beatsPerMinute, bpmAvg);
    }
    
    // Reset pembacaan suhu saat dalam mode detak jantung
    tempIndex = 0;
    tempArrayFilled = false;
    
  } else {
    // Tidak ada jari - baca suhu
    if (currentMillis - lastTempRead >= TEMP_SAMPLE_INTERVAL) {
      lastTempRead = currentMillis;
      
      // Baca suhu - menggunakan mode async yang lebih cepat
      if (!sensors.isConversionComplete()) {
        sensors.requestTemperatures();
      } else {
        temperature = sensors.getTempCByIndex(0);
        if (temperature != DEVICE_DISCONNECTED_C) {
          // Tambahkan ke array dan hitung rata-rata
          tempValues[tempIndex] = temperature;
          tempIndex++;
          
          if (tempIndex >= TEMP_SAMPLES) {
            tempIndex = 0;
            tempArrayFilled = true;
          }
          
          // Hitung rata-rata
          calculateTempAverage();
          
          Serial.print("Temp: ");
          Serial.print(temperature);
          Serial.print("\tAvg Temp: ");
          Serial.println(tempAvg);
          
          // Memulai konversi baru
          sensors.requestTemperatures();
        }
      }
    }
    
    // Update display saat interval tercapai
    if (currentMillis - lastDisplayUpdate >= DISPLAY_UPDATE_INTERVAL) {
      lastDisplayUpdate = currentMillis;
      showTemperature(temperature, tempAvg);
    }
    
    // Reset pembacaan detak jantung saat dalam mode suhu
    bpmIndex = 0;
    bpmArrayFilled = false;
  }
  
  // Mengurangi delay untuk meningkatkan sample rate
  delayMicroseconds(1000);  // 1ms delay untuk stabilitas minimal
}

// Fungsi untuk menghitung rata-rata BPM
void calculateBPMAverage() {
  float sum = 0;
  int count = bpmArrayFilled ? HR_SAMPLES : bpmIndex;
  
  for (int i = 0; i < count; i++) {
    sum += bpmValues[i];
  }
  
  bpmAvg = (count > 0) ? sum / count : 0;
}

// Fungsi untuk menghitung rata-rata suhu
void calculateTempAverage() {
  float sum = 0;
  int count = tempArrayFilled ? TEMP_SAMPLES : tempIndex;
  
  for (int i = 0; i < count; i++) {
    sum += tempValues[i];
  }
  
  tempAvg = (count > 0) ? sum / count : 0;
}

void showHeartRate(float bpm, float avg) {
  digitalWrite(BUZZER_PIN, LOW); // Pastikan buzzer mati saat detak jantung dibaca

  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Detak Jantung:");
  display.setCursor(0, 10);
  display.print("BPM: ");
  display.println(bpm, 1);
  display.setCursor(0, 20);
  display.print("Rata-rata: ");
  display.println(avg, 1);
  display.display();
}

void showTemperature(float tempC, float avg) {
  // Cek apakah suhu di atas batas
  if (tempC >= 33.0) {
    digitalWrite(BUZZER_PIN, HIGH); // Buzzer nyala
    delay(100);                     // Beep pendek
    digitalWrite(BUZZER_PIN, LOW);  // Buzzer mati
  } else {
    digitalWrite(BUZZER_PIN, LOW);  // Pastikan buzzer mati
  }

  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("Suhu Badan: ");
  display.print(tempC, 1);
  display.println(" C");

  display.setCursor(0, 16);
  display.print("Rata-rata: ");
  display.print(avg, 1);
  display.println(" C");

  display.display();
}
